// npx prisma push db

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  created    DateTime
  title      String?
  body       String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  likedBy    User[]    @relation("LikedBy", fields: [likedByIDs], references: [id])
  likedByIDs String[]  @db.ObjectId
  comments   Comment[]
  img String?
}

model Comment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  body           String
  created        DateTime
  post           Post     @relation(fields: [postId], references: [id])
  postId         String   @db.ObjectId
  upVotesUsers   User[]   @relation("UpVote", fields: [upVotesIDs], references: [id])
  upVotesIDs     String[] @db.ObjectId
  DownVotesUsers User[]   @relation("DownVote", fields: [DownVotesIDs], references: [id])
  DownVotesIDs   String[] @db.ObjectId
}

model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  email                String    @unique
  username             String?
  password             String
  avatar               String?
  posts                Post[]
  herdle               Animal[]
  herds Herd[]
  followedBy           User[]    @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs        String[]  @db.ObjectId
  following            User[]    @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs         String[]  @db.ObjectId
  postsLiked           Post[]    @relation("LikedBy", fields: [postsLikedIDs], references: [id])
  postsLikedIDs        String[]  @db.ObjectId
  comments Comment[] 
  commentsUpVoted      Comment[] @relation("UpVote", fields: [commentsUpVotedIDs], references: [id])
  commentsUpVotedIDs   String[]  @db.ObjectId
  commentsDownVoted    Comment[] @relation("DownVote", fields: [commentsDownVotedIDs], references: [id])
  commentsDownVotedIDs String[]  @db.ObjectId
}

model Animal {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  type               String?
  breed              String
  tagNumber          Int?
  registrationNumber Int?
  birthDate          DateTime?
  purchaseDate       DateTime?
  cost               Int?
  neutered           Boolean?
  neuteredDate       DateTime?
  deathDate          DateTime?
  cull               Boolean?
  sold               Boolean?
  soldTo             String?
  salePrice          Int?
  saleDate           DateTime?
  auctionSale        Boolean?
  auctionName        String?
  auctionWeight      Int?
  sire               String?
  dam                String?
  damSire            String?
  breeder            String?
  notes              Note[]
  birthWeight        Int?
  Herd               Herd?     @relation(fields: [herdId], references: [id])
  herdId             String[]  @db.ObjectId
  ownerId            String    @db.ObjectId
  photoUrl           String?
  User               User?     @relation(fields: [ownerId], references: [id])
}

model Herd {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  animals Animal[]
  User User @relation(fields: [ownerId], references: [id])
  ownerId String   @db.ObjectId
}

model Note {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  animal Animal @relation(fields: [animalId], references: [id])
  animalId String @db.ObjectId
  created DateTime
  text String
  type String
}
